const { default: makeWASocket, useMultiFileAuthState } = require('@whiskeysockets/baileys');
const axios = require('axios');
const express = require('express');
const { ChartJSNodeCanvas } = require('chartjs-node-canvas');
const WebSocket = require('ws');

const app = express();
app.use(express.json());

const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbzzkFkvMkJ7bCGmgEuLuwHsmypjqRcebCSU1vrGYcqSu0MGkSVhMo8LXhGAFCwCydzzew/exec';
const GRUPOS_PERMITIDOS = [
  '120363403512588677@g.us', // Grupo original
  '120363415954951531@g.us' // Novo grupo
]; // ID do grupo onde o bot est√° vinculado
const USUARIOS_AUTORIZADOS = [
  '5521975874116@s.whatsapp.net', // N1
  '55219976919619@s.whatsapp.net' // N2
];
const OPENROUTER_API_KEY = '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'; // Substitua pela sua chave de API do OpenRout
const chartJSNodeCanvas = new ChartJSNodeCanvas({
  width: 800,
  height: 600,
  backgroundColour: 'white'
});

const wss = new WebSocket.Server({ port: 8080 });

let ultimoComandoProcessado = null;

// Depois fa√ßa o log das configura√ß√µes
console.log("Grupos Autorizados:", GRUPOS_PERMITIDOS);
console.log("Usu√°rios Autorizados:", USUARIOS_AUTORIZADOS);

// Lista de comandos para o comando "ajuda"
const LISTA_DE_COMANDOS = `
üìã *Lista de Comandos* üìã

üí∞ *Resumo Financeiro*
- resumo: Mostra um resumo financeiro.

üí∏ *Transa√ß√µes*
- entrada [valor]: Registra uma entrada de dinheiro.
- sa√≠da [valor] [categoria]: Registra uma sa√≠da de dinheiro em uma categoria espec√≠fica.
- poupan√ßa [valor]: Adiciona um valor √† poupan√ßa.

üìä *Gr√°ficos e Estat√≠sticas*
- m√©dia: Mostra a m√©dia de entradas.
- grafico [tipo] [dados] [periodo]: Gera um gr√°fico com base nos dados fornecidos.

üìå *Categorias*
- categoria adicionar [nome]: Adiciona uma nova categoria.
- listar categorias: Lista todas as categorias.

üìÖ *Or√ßamentos*
- or√ßamento [n√∫mero]: Mostra o resumo de um or√ßamento espec√≠fico.
- or√ßamento definir [categoria] [valor]: Define um or√ßamento para uma categoria.
- or√ßamento listar: Lista todos os or√ßamentos.
- or√ßamento excluir [n√∫mero]: Exclui um or√ßamento espec√≠fico.

üí≥ *D√≠vidas*
- d√≠vida adicionar [valor] [credor] [dataVencimento]: Adiciona uma d√≠vida.
- d√≠vida listar: Lista todas as d√≠vidas.

‚è∞ *Lembretes*
- lembrete adicionar [descri√ß√£o] [data]: Adiciona um lembrete.
- lembrete listar: Lista todos os lembretes.

üìú *Hist√≥rico*
- historico [tipo] [categoria] [dataInicio] [dataFim]: Mostra o hist√≥rico de transa√ß√µes.

‚ùå *Exclus√£o*
- excluir [n√∫mero(s)]: Exclui transa√ß√µes espec√≠ficas.
- excluir tudo: Exclui todas as transa√ß√µes.
- excluir dia [data]: Exclui transa√ß√µes de um dia espec√≠fico.
- excluir periodo [dataInicio] [dataFim]: Exclui transa√ß√µes de um per√≠odo espec√≠fico.

üîß *Ajuda*
- ajuda: Mostra esta lista de comandos.
`;

// Fun√ß√£o para interpretar mensagens usando o OpenRouter
async function interpretarMensagemComOpenRouter(texto) {
  console.log("Iniciando interpreta√ß√£o da mensagem com OpenRouter...");
  try {
    const resposta = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'qwen/qwq-32b:free',
        messages: [
          {
            role: 'user',
            content: `Interprete a mensagem e retorne APENAS o JSON (sem explica√ß√µes adicionais e sem textos enormes, sendo apenas o necessario) correspondente ao comando. 
            Comandos dispon√≠veis:
            - resumo: Mostra um resumo financeiro.
            - poupan√ßa [valor]: Adiciona um valor √† poupan√ßa.
            - entrada [valor]: Registra uma entrada de dinheiro.
            - sa√≠da [valor] [categoria]: Registra uma sa√≠da de dinheiro em uma categoria espec√≠fica.
            - m√©dia: Mostra a m√©dia de entradas.
            - grafico [tipo] [dados] [periodo]: Gera um gr√°fico com base nos dados fornecidos.
            - categoria adicionar [nome]: Adiciona uma nova categoria.
            - listar categorias: Lista todas as categorias.
            - or√ßamento [n√∫mero]: Mostra o resumo do or√ßamento com o n√∫mero especificado.
            - or√ßamento definir [categoria] [valor]: Define um or√ßamento para uma categoria.
            - or√ßamento listar: Lista todos os or√ßamentos.
            - or√ßamento excluir [n√∫mero]: Exclui um or√ßamento espec√≠fico.
            - d√≠vida adicionar [valor] [credor] [dataVencimento]: Adiciona uma d√≠vida.
            - d√≠vida listar: Lista todas as d√≠vidas.
            - lembrete adicionar [descri√ß√£o] [data]: Adiciona um lembrete.
            - lembrete listar: Lista todos os lembretes.
            - historico [tipo] [categoria] [dataInicio] [dataFim]: Mostra o hist√≥rico de transa√ß√µes.
            - excluir [n√∫mero(s)]: Exclui transa√ß√µes espec√≠ficas.
            - excluir tudo: Exclui todas as transa√ß√µes.
            - excluir dia [data]: Exclui transa√ß√µes de um dia espec√≠fico.
            - excluir periodo [dataInicio] [dataFim]: Exclui transa√ß√µes de um per√≠odo espec√≠fico.

            1¬∫ **Instru√ß√µes Especiais:**
            - Se a mensagem se referir a compras de alimentos (como verduras, legumes, frutas, carnes, etc.), a categoria deve ser sempre "Alimenta√ß√£o".
            - Exemplos de mensagens que devem ser categorizadas como "Alimenta√ß√£o":
              - "Comprei uma caixa de aipim por 60 reais"
              - "Gastei 30 reais em verduras no mercado"
              - "Paguei 50 reais em frutas e legumes"

              2¬∫ **Instru√ß√µes Especiais:**
            - Se a mensagem se referir a compras de sa√∫de (como maquiagem, desodorante, rem√©dio, exame, etc.), a categoria deve ser sempre "Alimenta√ß√£o".
            - Exemplos de mensagens que devem ser categorizadas como "Sa√∫de":
              - "Comprei uma dipirona por 3 reais"
              - "Gastei 30 reais em maquiagens na farm√°cia"
              - "Paguei 50 reais em shampoo e condicionador"

              3¬∫ **Instru√ß√µes Especiais:**
              - Se a mensagem for uma pergunta geral, conversa ou n√£o relacionada a finan√ßas, retorne um JSON vazio: {}.
              - Exemplos de mensagens que devem retornar JSON vazio:
              - "Qual √© a previs√£o do tempo?"
              - "Como voc√™ est√°?"
              - "100 + 10% √© quanto?"
              - "Quero fazer uma viagem com 800 reais em S√£o Paulo. Poderia me ajudar a montar uma viagem de 3 dias?"

            Sua tarefa √© interpretar a seguinte mensagem e retornar o comando correspondente em formato JSON:
            {
              "comando": "nome_do_comando",
              "parametros": {
                "parametro1": "valor1",
                "parametro2": "valor2",
                "parametro3": "valor3"
              }
            }

            A mensagem pode conter 1, 2 ou 3 par√¢metros. Se houver menos de 3 par√¢metros, os valores ausentes devem ser preenchidos com valores padr√£o ou omitidos.

            **Valores padr√£o:**
            - Para 'grafico':
              - tipo: 'bar'
              - dados: 'ambos'
              - periodo: 'm√™s'

            **Retorne apenas o JSON, sem explica√ß√µes adicionais.**

            Mensagem: "${texto}"`
          }
        ],
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`
        }
      }
    );

    console.log("Resposta da API OpenRouter recebida:", JSON.stringify(resposta.data, null, 2));

    // Acessa o conte√∫do da mensagem
    const mensagem = resposta.data.choices[0].message.content;

    // Tenta extrair o JSON da resposta
    const jsonMatch = mensagem.match(/\{.*\}/s); // Extrai o JSON da string
    if (jsonMatch) {
      try {
        const interpretacao = JSON.parse(jsonMatch[0]);
        console.log("Interpreta√ß√£o da mensagem:", interpretacao);
        return interpretacao;
      } catch (erro) {
        console.error("Erro ao analisar JSON:", erro);
        return null;
      }
    } else {
      console.log("Nenhum JSON v√°lido encontrado no campo 'content'. Usando fallback manual...");
      return interpretarMensagemManual(texto); // Fallback manual
    }
  } catch (erro) {
    console.error("Erro ao interpretar mensagem com OpenRouter:", erro);
    return null;
  }
}

// Fun√ß√£o para gerar uma resposta de conversa√ß√£o usando o OpenRouter
async function gerarRespostaConversacao(texto) {
  console.log("Gerando resposta de conversa√ß√£o com OpenRouter...");
  try {
    const resposta = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: 'qwen/qwq-32b:free',
        messages: [
          {
            role: 'user',
            content: `Voc√™ √© um assistente virtual que ajuda com finan√ßas e tamb√©m pode conversar sobre outros assuntos. Responda de forma amig√°vel e √∫til.
            Mensagem: "${texto}"`
          }
        ],
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENROUTER_API_KEY}`
        }
      }
    );

    console.log("Resposta da API OpenRouter recebida:", JSON.stringify(resposta.data, null, 2));

    // Acessa o conte√∫do da mensagem
    const mensagem = resposta.data.choices[0].message.content;
    return mensagem;
  } catch (erro) {
    console.error("Erro ao gerar resposta de conversa√ß√£o:", erro);
    return "‚ùå Desculpe, n√£o consegui processar sua mensagem. Tente novamente mais tarde.";
  }
}

function interpretarMensagemManual(texto) {
  console.log("Usando fallback manual para interpretar a mensagem...");
  const palavras = texto.toLowerCase().split(' ');
  const valorMatch = texto.match(/\d+/);
  const valor = valorMatch ? parseFloat(valorMatch[0]) : null;
 
    // Mapeamento de palavras-chave para categorias
  const categorias = {
    // Alimenta√ß√£o
    arroz: 'Alimenta√ß√£o',
    alho: 'Alimenta√ß√£o',
    feij√£o: 'Alimenta√ß√£o',
    carne: 'Alimenta√ß√£o',
    frango: 'Alimenta√ß√£o',
    peixe: 'Alimenta√ß√£o',
    leite: 'Alimenta√ß√£o',
    p√£o: 'Alimenta√ß√£o',
    macarr√£o: 'Alimenta√ß√£o',
    √≥leo: 'Alimenta√ß√£o',
    a√ß√∫car: 'Alimenta√ß√£o',
    caf√©: 'Alimenta√ß√£o',
    refrigerante: 'Alimenta√ß√£o',
    suco: 'Alimenta√ß√£o',
    fruta: 'Alimenta√ß√£o',
    verdura: 'Alimenta√ß√£o',
    legume: 'Alimenta√ß√£o',
    comida: 'Alimenta√ß√£o',
    restaurante: 'Alimenta√ß√£o',
    lanche: 'Alimenta√ß√£o',
    mercado: 'Alimenta√ß√£o',
    supermercado: 'Alimenta√ß√£o',

    // Transporte
    t√°xi: 'Transporte',
    uber: 'Transporte',
    √¥nibus: 'Transporte',
    gasolina: 'Transporte',
    combust√≠vel: 'Transporte',
    estacionamento: 'Transporte',
    metro: 'Transporte',
    bilhete: 'Transporte',
    passagem: 'Transporte',

    // Lazer
    cinema: 'Lazer',
    Netflix: 'Lazer',
    Spotify: 'Lazer',
    parque: 'Lazer',
    viagem: 'Lazer',
    jogo: 'Lazer',
    festa: 'Lazer',
    bar: 'Lazer',
    show: 'Lazer',
    teatro: 'Lazer',
    museu: 'Lazer',
    passeio: 'Lazer',

    // Moradia
    aluguel: 'Moradia',
    condom√≠nio: 'Moradia',
    luz: 'Moradia',
    √°gua: 'Moradia',
    internet: 'Moradia',
    telefone: 'Moradia',
    g√°s: 'Moradia',
    reforma: 'Moradia',
    m√≥veis: 'Moradia',
    decora√ß√£o: 'Moradia',

    // Sa√∫de
    m√©dico: 'Sa√∫de',
    rem√©dio: 'Sa√∫de',
    farm√°cia: 'Sa√∫de',
    hospital: 'Sa√∫de',
    plano: 'Sa√∫de',
    dentista: 'Sa√∫de',
    consulta: 'Sa√∫de',
    exame: 'Sa√∫de',
    √≥culos: 'Sa√∫de',
    fisioterapia: 'Sa√∫de',

    // Educa√ß√£o
    escola: 'Educa√ß√£o',
    curso: 'Educa√ß√£o',
    faculdade: 'Educa√ß√£o',
    livro: 'Educa√ß√£o',
    material: 'Educa√ß√£o',
    mensalidade: 'Educa√ß√£o',
    matr√≠cula: 'Educa√ß√£o',
    aula: 'Educa√ß√£o',
    workshop: 'Educa√ß√£o',
    semin√°rio: 'Educa√ß√£o',

    // Vestu√°rio
    roupa: 'Vestu√°rio',
    camiseta: 'Vestu√°rio',
    cal√ßa: 'Vestu√°rio',
    sapato: 'Vestu√°rio',
    t√™nis: 'Vestu√°rio',
    blusa: 'Vestu√°rio',
    jaqueta: 'Vestu√°rio',
    bolsa: 'Vestu√°rio',
    acess√≥rio: 'Vestu√°rio',
    √≥culos: 'Vestu√°rio',
    lingerie: 'Vestu√°rio',

    // Assinaturas
    Netflix: 'Assinaturas',
    Spotify: 'Assinaturas',
    Amazon: 'Assinaturas',
    Disney: 'Assinaturas',
    HBO: 'Assinaturas',
    revista: 'Assinaturas',
    jornal: 'Assinaturas',
    software: 'Assinaturas',
    app: 'Assinaturas',

    // Presentes
    presente: 'Presentes',
    anivers√°rio: 'Presentes',
    natal: 'Presentes',
    casamento: 'Presentes',
    flores: 'Presentes',
    cart√£o: 'Presentes',
    lembrancinha: 'Presentes',

    // Animais de Estima√ß√£o
    pet: 'Animais de Estima√ß√£o',
    ra√ß√£o: 'Animais de Estima√ß√£o',
    veterin√°rio: 'Animais de Estima√ß√£o',
    banho: 'Animais de Estima√ß√£o',
    tosa: 'Animais de Estima√ß√£o',
    brinquedo: 'Animais de Estima√ß√£o',
    coleira: 'Animais de Estima√ß√£o',

    // Outros
    doa√ß√£o: 'Outros',
    caridade: 'Outros',
    multa: 'Outros',
    imposto: 'Outros',
    taxa: 'Outros',
    seguro: 'Outros',
    conserto: 'Outros',
    manuten√ß√£o: 'Outros',
    reparo: 'Outros'
  };

  let categoria = 'Outros'; // Categoria padr√£o caso n√£o encontre uma correspond√™ncia
  for (const [palavra, cat] of Object.entries(categorias)) {
    if (palavras.includes(palavra)) {
      categoria = cat;
      break;
    }
  }

  // Determina o tipo de transa√ß√£o
  const tipo = palavras.includes('usei') || palavras.includes('gastei') || palavras.includes('paguei') || palavras.includes('comprei') ? 'Sa√≠da' : 'Entrada';

  if (!valor) {
    return null; // N√£o foi poss√≠vel extrair um valor
  }

  return { valor, categoria, tipo };
}

// Fun√ß√£o para gerar gr√°ficos
async function gerarGrafico(tipo, dados) {
  console.log("Gerando gr√°fico...");
  const configuration = {
    type: tipo, // 'bar' √© o tipo de gr√°fico v√°lido
    data: {
      labels: dados.labels, // R√≥tulos do eixo X
      datasets: dados.datasets // Conjuntos de dados
    },
    options: {
      responsive: true,
      plugins: {
        title: { display: true, text: dados.titulo, font: { size: 18 } }, // T√≠tulo do gr√°fico
        legend: { position: 'top' } // Legenda no topo
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: { callback: (value) => 'R$ ' + value.toFixed(2).replace(".", ",") } // Formata os valores do eixo Y
        }
      }
    }
  };
  return chartJSNodeCanvas.renderToBuffer(configuration);
}

// Fun√ß√£o para verificar se a mensagem parece ser um comando financeiro
function pareceSerComandoFinanceiro(texto) {
  const palavrasChaveFinanceiras = [
    "resumo", "poupan√ßa", "entrada", "sa√≠da", "m√©dia", "gr√°fico", "categoria", 
    "or√ßamento", "d√≠vida", "lembrete", "hist√≥rico", "excluir", "comprei", "gastei", 
    "paguei", "transferir", "saldo", "meta", "valor", "reais", "R$"
  ];

  // Verifica se a mensagem cont√©m alguma palavra-chave financeira
  return palavrasChaveFinanceiras.some(palavra => 
    texto.toLowerCase().includes(palavra.toLowerCase())
  );
}

// Fun√ß√£o principal do bot
async function iniciarBot() {
  const { state, saveCreds } = await useMultiFileAuthState('auth_info');
  const sock = makeWASocket({ auth: state });
  sock.ev.on('creds.update', saveCreds);

  sock.ev.on('connection.update', (update) => {
    const { connection, qr } = update;
    if (qr) {
      const qrLink = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(qr)}`;
      console.log('QR Code:', qrLink);
      wss.clients.forEach(client => client.send(JSON.stringify({ qr: qrLink })));
    }
    if (connection === 'open') console.log('Bot conectado!');
    if (connection === 'close') setTimeout(iniciarBot, 5000);
  });

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];

    // Verifica√ß√£o completa da estrutura da mensagem
    if (
      !msg?.message || 
      !msg.key?.remoteJid || 
      typeof msg.message.conversation !== 'string'
  ) {
      console.log("Mensagem ignorada (formato inv√°lido).");
      return;
  }

  // Declara√ß√£o √∫nica da vari√°vel 'texto'
  const texto = msg.message.conversation?.trim() || "";

  // Comando !id (funciona em qualquer grupo)
  if (texto.toLowerCase() === "!id") {
    const grupoId = msg.key.remoteJid;
    await sock.sendMessage(grupoId, { 
      text: `üîë ID deste grupo: *${grupoId}*` 
    });
    return;
  }

  // --- Verifica√ß√µes de grupo e usu√°rio ---
  console.log("Grupo Remetente:", msg.key.remoteJid);
  
  // Verifica grupo permitido
  if (!GRUPOS_PERMITIDOS.includes(msg.key.remoteJid)) {
    console.log("Mensagem ignorada (grupo n√£o autorizado). IDs v√°lidos:", GRUPOS_PERMITIDOS);
    return;
  }

  // Verifica usu√°rio autorizado
  const remetenteId = msg.key.participant || msg.key.remoteJid;
  if (!USUARIOS_AUTORIZADOS.includes(remetenteId)) {
    console.log("Usu√°rio n√£o autorizado:", remetenteId);
    return;
  }

    // Ignora apenas mensagens que come√ßam com "‚ùå" (respostas autom√°ticas do bot)
    if (msg.message.conversation?.startsWith("‚ùå")) {
      console.log("Mensagem ignorada (resposta autom√°tica do bot).");
      return;
    }

    // Verifica se a mensagem √© do tipo 'conversation' (texto)
    if (!msg.message.conversation) {
      console.log("Mensagem ignorada (n√£o √© uma mensagem de texto).");
      return;
    }

    // Verifica se a mensagem √© antiga (mais de 60 segundos)
    const mensagemTimestamp = msg.messageTimestamp;
    const agora = Math.floor(Date.now() / 1000);
    if (agora - mensagemTimestamp > 60) {
      console.log("Mensagem ignorada (√© uma mensagem antiga).");
      return;
    }

    console.log("Mensagem recebida:", JSON.stringify(msg, null, 2));

  // Nome do remetente (apenas para exibi√ß√£o)
  const remetenteNome = msg.pushName || "Usu√°rio"; // Nome exibido no WhatsApp
// Comando para obter o ID do grupo
if (texto.toLowerCase() === "!id") {
  const grupoId = msg.key.remoteJid;
  await sock.sendMessage(grupoId, { 
    text: `üìå ID deste grupo: *${grupoId}*` 
  });
  return;
}
  if (ultimoComandoProcessado === texto) return;
  ultimoComandoProcessado = texto;

  console.log("Texto da mensagem:", texto);

    // --- VERIFICA√á√ÉO DO COMANDO "AJUDA" ---
  if (texto.toLowerCase() === "ajuda") {
    await sock.sendMessage(msg.key.remoteJid, { text: LISTA_DE_COMANDOS });
    return; // Encerra o processamento aqui
  }

    try {
      if (pareceSerComandoFinanceiro(texto)) {
        console.log("Tentando interpretar a mensagem como um comando financeiro...");
        const interpretacao = await interpretarMensagemComOpenRouter(texto);
  
        // Se o OpenRouter retornou um comando v√°lido
        if (interpretacao?.comando) {
          const { comando, parametros } = interpretacao;
          console.log("Comando interpretado:", comando);
          console.log("Par√¢metros interpretados:", parametros);

      // Processa o comando financeiro
      switch (comando) {
        // CASO 'resumo'
        case 'resumo': { // <--- Adicione chaves aqui
          console.log("Processando comando 'resumo'...");
          const resumoFinanceiro = await axios.get(`${WEB_APP_URL}?action=resumo`); // Renomeei para resumoFinanceiro
          await sock.sendMessage(msg.key.remoteJid, { text: resumoFinanceiro.data });
          break;
        }

        case 'poupan√ßa':
  console.log("Processando comando 'poupan√ßa'...");
  const valorPoupanca = parametros.valor;
  // Alterado: remetente ‚Üí remetenteNome
  await axios.get(`${WEB_APP_URL}?action=adicionarPoupanca&valor=${valorPoupanca}&remetente=${remetenteNome}`);
  await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ R$ ${valorPoupanca} transferidos para a poupan√ßa.` });
  break;

          case 'entrada':
            console.log("Processando comando 'entrada'...");
            const valorEntrada = parametros.valor;
            // Alterado: remetente ‚Üí remetenteNome
            await axios.get(`${WEB_APP_URL}?action=entrada&valor=${valorEntrada}&remetente=${remetenteNome}`);
            await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ Entrada de R$ ${valorEntrada} registrada por ${remetenteNome}.` });
            break;

          case 'sa√≠da':
            console.log("Processando comando 'sa√≠da'...");
            const valorSaida = parametros.valor;
            const categoriaSaida = parametros.categoria;
            const responseSaida = await axios.get(
              `${WEB_APP_URL}?action=sa√≠da&valor=${valorSaida}&categoria=${categoriaSaida}&remetente=${remetenteNome}` // ‚úÖ Corrigido
            );
            await sock.sendMessage(msg.key.remoteJid, { text: responseSaida.data });
            break;

        case 'm√©dia':
          console.log("Processando comando 'm√©dia'...");
          const media = await axios.get(`${WEB_APP_URL}?action=mediaEntradas`);
          await sock.sendMessage(msg.key.remoteJid, { text: media.data });
          break;

        case 'grafico':
          console.log("Processando comando 'grafico'...");
          const tipoGrafico = 'bar'; // For√ßa o tipo de gr√°fico para 'bar'
          const tipoDados = parametros.dados || 'ambos';
          const periodo = parametros.periodo || 'todos';

          // Obt√©m os dados da API
          const response = await axios.get(`${WEB_APP_URL}?action=getDadosGrafico&tipo=${tipoDados}&periodo=${periodo}`);
          const dados = response.data;

          // Verifica se os dados est√£o no formato correto
          if (!dados.labels || !dados.datasets || !dados.titulo) {
            console.error("Dados do gr√°fico inv√°lidos:", dados);
            await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Erro: Dados do gr√°fico inv√°lidos." });
            return;
          }

          // Gera o gr√°fico
          try {
            const image = await gerarGrafico(tipoGrafico, dados);
            await sock.sendMessage(msg.key.remoteJid, { image: image, caption: `üìä ${dados.titulo}` });
          } catch (error) {
            console.error("Erro ao gerar o gr√°fico:", error);
            await sock.sendMessage(msg.key.remoteJid, { text: `‚ùå Erro ao gerar o gr√°fico: ${error.message}` });
          }
          break;

        case 'categoria adicionar':
          console.log("Processando comando 'categoria adicionar'...");
          const nomeCategoria = parametros.nome;
          await axios.get(`${WEB_APP_URL}?action=adicionarCategoria&categoria=${nomeCategoria}`);
          await sock.sendMessage(msg.key.remoteJid, { text: `üìå Categoria "${nomeCategoria}" adicionada com sucesso.` });
          break;

        case 'listar categorias':
          console.log("Processando comando 'listar categorias'...");
          const responseCategorias = await axios.get(`${WEB_APP_URL}?action=listarCategorias`);
          const categorias = responseCategorias.data.categorias;
          if (categorias.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { text: "üìå Nenhuma categoria cadastrada." });
          } else {
            const listaCategorias = categorias.map((cat, index) => `${index + 1}. ${cat}`).join('\n');
            await sock.sendMessage(msg.key.remoteJid, { text: `üìå Categorias cadastradas:\n${listaCategorias}` });
          }
          break;

        case 'd√≠vida adicionar':
          console.log("Processando comando 'd√≠vida adicionar'...");
          const valorDivida = parametros.valor;
          const credor = parametros.credor;
          const dataVencimento = parametros.dataVencimento;
          await axios.get(`${WEB_APP_URL}?action=adicionarDivida&valor=${valorDivida}&credor=${credor}&dataVencimento=${dataVencimento}`);
          await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ D√≠vida de R$ ${valorDivida} adicionada com ${credor}, vencendo em ${dataVencimento}.` });
          break;

        case 'd√≠vida listar':
          console.log("Processando comando 'd√≠vida listar'...");
          const responseDividas = await axios.get(`${WEB_APP_URL}?action=listarDividas`);
          const dividas = responseDividas.data.dividas;
          if (dividas.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { text: "üìå Nenhuma d√≠vida cadastrada." });
          } else {
            const listaDividas = dividas.map(d => `${d.id}. ${d.credor}: R$ ${d.valor} (Vencimento: ${d.vencimento})`).join('\n');
            await sock.sendMessage(msg.key.remoteJid, { text: `üìå D√≠vidas:\n${listaDividas}` });
          }
          break;

        case 'lembrete adicionar':
          console.log("Processando comando 'lembrete adicionar'...");
          const descricaoLembrete = parametros.descricao;
          const dataLembrete = parametros.data;
          await axios.get(`${WEB_APP_URL}?action=adicionarLembrete&descricao=${descricaoLembrete}&data=${dataLembrete}`);
          await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ Lembrete "${descricaoLembrete}" adicionado para ${dataLembrete}.` });
          break;

        case 'lembrete listar':
          console.log("Processando comando 'lembrete listar'...");
          const responseLembretes = await axios.get(`${WEB_APP_URL}?action=listarLembretes`);
          const lembretes = responseLembretes.data.lembretes;
          if (lembretes.length === 0) {
            await sock.sendMessage(msg.key.remoteJid, { text: "üìå Nenhum lembrete cadastrado." });
          } else {
            const listaLembretes = lembretes.map(l => `${l.id}. ${l.descricao} (${l.data})`).join('\n');
            await sock.sendMessage(msg.key.remoteJid, { text: `üìå Lembretes:\n${listaLembretes}` });
          }
          break;

        case 'or√ßamento definir':
          console.log("Processando comando 'or√ßamento definir'...");
          const categoria = parametros.categoria;
          const valor = parametros.valor;
          await axios.get(`${WEB_APP_URL}?action=definirOrcamento&categoria=${categoria}&valor=${valor}`);
          await sock.sendMessage(msg.key.remoteJid, { text: `‚úÖ Or√ßamento de R$ ${valor} definido para a categoria "${categoria}".` });
          break;

        case 'or√ßamento listar':
          console.log("Processando comando 'or√ßamento listar'...");
          const responseOrcamentos = await axios.get(`${WEB_APP_URL}?action=listarOrcamentos`);
          await sock.sendMessage(msg.key.remoteJid, { text: responseOrcamentos.data });
          break;

          case 'or√ßamento excluir': {
            console.log("Processando comando 'or√ßamento excluir'...");
            const numeroOrcamentoExcluir = parametros['n√∫mero']; // Acessa o par√¢metro corretamente
            const responseExcluirOrcamento = await axios.get(`${WEB_APP_URL}?action=excluirOrcamento&numero=${numeroOrcamentoExcluir}`);
            await sock.sendMessage(msg.key.remoteJid, { text: responseExcluirOrcamento.data });
            break;
          }

          case 'or√ßamento': { // <--- Adicione chaves aqui
            console.log("Processando comando 'or√ßamento'...");
            const numeroOrcamentoConsulta = parseInt(parametros.numero);
        
            // Obt√©m a lista de or√ßamentos
            const responseOrcamentosLista = await axios.get(`${WEB_APP_URL}?action=listarOrcamentos`);
            const orcamentos = responseOrcamentosLista.data.split('\n').slice(1).filter(line => line.trim() !== '');
        
            // Verifica se o n√∫mero √© v√°lido
            if (numeroOrcamentoConsulta < 1 || numeroOrcamentoConsulta > orcamentos.length) {
              await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå N√∫mero de or√ßamento inv√°lido." });
              break;
            }
        
            const orcamentoSelecionado = orcamentos[numeroOrcamentoConsulta - 1];
        
            // Valida o formato da linha
            if (!orcamentoSelecionado.includes(':')) {
              await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Formato de or√ßamento inv√°lido." });
              break;
            }
        
            // Extrai a categoria
            const [indiceCategoria, valorOrcamento] = orcamentoSelecionado.split(':');
            const partesIndice = indiceCategoria.split('. ');
            
            if (partesIndice.length < 2) {
              await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Formato de categoria inv√°lido." });
              break;
            }
        
            const categoriaOrcamento = partesIndice[1].trim();
        
            // Obt√©m o resumo do or√ßamento
            const responseResumo = await axios.get(`${WEB_APP_URL}?action=resumoOrcamento&categoria=${categoriaOrcamento}`);
            const dadosResumo = responseResumo.data; // Renomeei para dadosResumo
        
            // Formata a mensagem
            const mensagemResumo = 
`üìä Or√ßamento de ${dadosResumo.categoria}:
üí∞ Total Gasto: R$ ${dadosResumo.totalGasto}
üìâ Porcentagem Utilizada: ${dadosResumo.porcentagemUtilizada}%
üìà Valor Restante: R$ ${dadosResumo.valorRestante}`;
            await sock.sendMessage(msg.key.remoteJid, { text: mensagemResumo });
            break;
          }

        case 'excluir':
          console.log("Processando comando 'excluir'...");
          const numeros = Object.values(parametros).join(",");
          const responseExcluir = await axios.get(`${WEB_APP_URL}?action=excluirTransacao&parametro=${encodeURIComponent(numeros)}`);
          await sock.sendMessage(msg.key.remoteJid, { text: responseExcluir.data });
          break;

          default:
            console.log("Comando n√£o reconhecido.");
            await sock.sendMessage(msg.key.remoteJid, { text: "‚ùå Comando n√£o reconhecido. Use 'ajuda' para ver a lista de comandos." });
        }
      } else {
        // Se o OpenRouter retornou JSON vazio ou inv√°lido, entra na conversa√ß√£o
        console.log("Gerando resposta de conversa√ß√£o...");
        const respostaConversacao = await gerarRespostaConversacao(texto);
        await sock.sendMessage(msg.key.remoteJid, { text: respostaConversacao });
      }
    } else {
      // Se a mensagem n√£o parece ser um comando, entra na conversa√ß√£o
      console.log("Gerando resposta de conversa√ß√£o...");
      const respostaConversacao = await gerarRespostaConversacao(texto);
      await sock.sendMessage(msg.key.remoteJid, { text: respostaConversacao });
    }
  } catch (error) {
    console.error("Erro ao processar a mensagem:", error);
    await sock.sendMessage(msg.key.remoteJid, { text: `‚ùå Erro: ${error.message}` });
  }
});
}

app.listen(3000, () => console.log("Servidor rodando!"));
iniciarBot();
